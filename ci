#!/usr/bin/env bash

cat <<INFO
This is the Everest CI script.
... called as $0
... working directory is $(pwd)
... environment: $(uname -a)
INFO

# Sorry, everyone
if (( ${BASH_VERSION%%.*} < 4 )); then
  echo "This script requires Bash >= 4. On OSX, try: brew install bash"
  exit 1
fi

# CI runs [bash -c path/to/ci] without [--login]. This makes sure we have /bin
# and /usr/bin first...!
BUILD_DIR=$(pwd)
source /etc/profile
if [[ -f ~/.bash_profile ]]; then
  source ~/.bash_profile
fi
echo "... PATH is $PATH"
cd "$BUILD_DIR"

# Any error is fatal.
set -e
set -o pipefail
# set -x # uncomment for debugging.

# Self-update
echo "... trying to self-update"
if [[ ${0##*/} == $0 ]]; then
  pushd $(dirname $(which $0))
else
  pushd $(dirname $0)
fi
old_revision=$(git rev-parse HEAD)
git fetch
if ! git merge --ff origin/master; then
  echo "WARNING: script cannot self-update"
else
  if [[ $(git rev-parse HEAD) != $old_revision ]]; then
    echo "... new version of CI script available, updated"
    popd
    $0 "$@"
    exit 0
  else
    echo "... no new version available"
  fi
fi
popd

# $1: channel
# $2: message
post_to_slack () {
  curl -X POST --data-urlencode "payload={\"channel\": \"#$1\", \
    \"username\": \"dzomo\", \"text\": \"$2\", \
    \"icon_emoji\": \":water_buffalo:\"}" "$SLACK_FSTAR_WEBHOOK"
}

# $1: the command to run
# $2: the stem of the log file
# $3: commit message
# $4: slack channel
# $5: github org/project
run_log_commit () {
  if [[ $CI_LOGS == "" ]]; then
    echo "Don't know where to checkout the logs"
    exit 1
  fi

  # Determine where the logs are going
  log_out=$2.out
  log_err=$2.err

  # The actual CI
  SECONDS=0
  if $1 \
    2> >( tee $CI_LOGS/$log_err | sed 's/^/STDERR : /' >&2 ) \
    | tee $CI_LOGS/$log_out
  then
    success=true
  else
    success=false
  fi

  # Commit & push the logs. This does not prevent interleaving from concurrent
  # build jobs.
  pushd $CI_LOGS
  export GIT_MERGE_AUTOEDIT=no
  git pull
  git add $log_out
  git add $log_err
  if $success; then
    git commit -am "$3 / $commit (success)"
  else
    git commit -am "$3 / $commit (failure)"
  fi
  git push
  popd

  if [[ $SLACK_FSTAR_WEBHOOK != "" ]]; then
    raw_url=https://raw.githubusercontent.com/project-everest/ci-logs/master/
    slack_log=$(git log --pretty=format:"%s" -1)
    slack_author=$(git log --pretty=format:"%cn" -1)
    slack_time=$(date -d@$SECONDS -u +%Hh%Mm%Ss)
    slack_msg="<$raw_url/$log_err|stderr> <$raw_url/$log_out|stdout>"
    slack_commit=$(git rev-parse HEAD | cut -c 1-8)
    slack_name=$(git remote get-url origin)
    slack_name=${slack_name##*/}
    slack_name=${slack_name%.git}
    slack_branch=$(git branch -r --contains HEAD | tail -n 1 | tr -d ' ')
    slack_os=$(uname)
    if $success; then
      slack_type="success ðŸ˜º"
    else
      slack_type="failure ðŸ˜¿"
    fi
    payload="Commit <https://github.com/$5/commit/$slack_commit|$slack_commit> ($slack_branch) is a *$slack_type*\n\
      *Duration:* $slack_time\n\
      *Author:* $slack_author\n\
      *Message:* $slack_log\n\
      *Project:* $slack_name\n\
      *Command:* $1\n\
      *OS:* $slack_os\n\
      *Logs:* $slack_msg"
    echo "$payload"
    post_to_slack "$4" "$payload"
  fi

  if ! $success; then
    exit 255
  fi
}

refresh_fstar_hints () {
  if ! git branch -r --contains HEAD | grep 'origin/master'; then
    echo "Not regenerating hints for branches other than master!"
  fi
  find . -iname '*.hints' | xargs git add
  git commit -am "[CI] regenerate hints"
  commit=$(git rev-parse HEAD)
  git fetch
  git checkout master
  git reset --hard origin/master
  export GIT_MERGE_AUTOEDIT=no
  git merge $commit -Xtheirs
  git push
}

# Main commands.
case "$1" in
  fstar-ci)
    # Run the test suite minus the long tests (e.g. crypto)
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi
    run_log_commit "make -C src utest -j 24" "fstar-$(date +%Y%m%d%H%M%S)" \
      "F* CI" "#fstar-build" "FStarLang/FStar"
    ;;

  fstar-nightly)
    # Run the test suite including the long tests and the examples directory
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi
    export OTHERFLAGS="--record_hints"
    run_log_commit "make -C src ulong -j 24" "fstar-$(date +%Y%m%d%H%M%S)" \
      "F* nightly" "#fstar-build" "FStarLang/FStar"
    refresh_fstar_hints
    ;;

  mitls-ci)
    if [ ! -f miTLS_icla.txt ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    # Clone F* from the specified revision, set FSTAR_HOME
    if [ ! -d fstar ]; then
      mkdir -p fstar
      cd fstar
      git init
      git remote add origin https://github.com/FStarLang/FStar/
      cd ..
    fi
    cd fstar
    git fetch origin
    git reset --hard $(cat ../.fstar_version)
    make -C src/ocaml-output clean
    make -C src/ocaml-output -j 15
    cd ..
    if command -v cygpath >/dev/null 2>&1; then
      export FSTAR_HOME=$(cygpath -m $(pwd)/fstar)
    else
      export FSTAR_HOME=$(pwd)/fstar
    fi

    run_log_commit "make -C src/tls -j 24 all-ver tls-ffi" "mitls-$(date +%Y%m%d%H%M%S)" \
      "miTLS CI" "#mitls-build" "mitls/mitls-fstar"
    ;;

  everest-ci)
    # Clone all projects together and make sure they test and build together
    ;;

  everest-nightly-check)
    # Start a fresh docker container that sets up everything, checks that
    # everything builds and runs on a fresh Ubuntu setup
    yes | docker run ubuntu bash -c "$(cat ubuntu-from-scratch)" | tee docker-log
    if [[ $(cat docker-log |Â tail -n 1) != "EVEREST-SUCCESS" ]]; then
      echo "Docker script did not reach completion -- failure"
      exit 1
    fi
    ;;

  everest-nightly-move)
    # Try to move the package to their last revision
    ;;

  *)
    cat <<USAGE
USAGE: $0 ACTION

ACTIONS:
  fstar-ci
  fstar-nightly
  mitls-ci
  everest-ci
  everest-nightly-check
  everest-nightly-move

REMARKS:
  Read this script's source code for more explanations. It has comments.
USAGE
    ;;
esac

