#!/usr/bin/env bash

cat <<INFO
This is the Everest CI script.
... called as $0
... working directory is $(pwd)
... environment: $(uname -a)
INFO

# Sorry, everyone
if (( ${BASH_VERSION%%.*} < 4 )); then
  echo "This script requires Bash >= 4. On OSX, try: brew install bash"
  exit 1
fi

# CI runs [bash -c path/to/ci] without [--login]. This makes sure we have /bin
# and /usr/bin first...!
BUILD_DIR=$(pwd)
source /etc/profile
if [[ -f ~/.bash_profile ]]; then
  source ~/.bash_profile
fi
echo "... PATH is $PATH"
cd "$BUILD_DIR"

# Any error is fatal.
set -e
set -o pipefail
# set -x # uncomment for debugging. This also will expose any github access tokens which will invalidate them so use wisely

# Some commands...
if [[ $(uname) = "Darwin" ]]; then
  DATE=gdate
else
  DATE=date
fi

# Self-update
echo "... trying to self-update"
if [[ ${0##*/} == $0 ]]; then
  pushd $(dirname $(which $0))
else
  pushd $(dirname $0)
fi
OLD_REVISION=$(git rev-parse HEAD)
git fetch
if ! git merge --ff origin/master; then
  echo "WARNING: script cannot self-update"
else
  if [[ $(git rev-parse HEAD) != $OLD_REVISION ]]; then
    echo "... new version of CI script available, updated"
    popd
    $0 "$@"
    exit 0
  else
    echo "... no new version available"
  fi
fi
EVEREST_CI_HOME=$(pwd)
popd

# The parallel option, either empty (by default), or -j n,
# as specified on the command line.
# WARNING: in the latter case, it MUST be interpreted as two words, so
# NEVER quote it as "$PARALLEL_OPT"
# Use $PARALLEL_OPT instead
unset PARALLEL_OPT

# Encode < > & and " in the given string
# The Slack syntax does not require escaping " or \ but JSON does in order to
# form a valid payload.
function quote() {
  local msg="$1"
  msg=${msg//&/&amp;}
  msg=${msg//</&lt;}
  msg=${msg//>/&gt;}
  msg=${msg//\\/\\\\}
  msg=${msg//\"/\\\"}
  echo $msg
}

# Once we have setup the environment, made errors fatal, and self-upgraded (all
# of which should never fail), we try to report any unexpected failure.
#  $1: channel
#  $2: message
function post_to_slack() {
  curl -X POST --data-urlencode "payload={\"channel\": \"$1\", \
    \"username\": \"dzomo\", \"text\": \"$2\", \
    \"icon_emoji\": \":water_buffalo:\"}" "$SLACK_FSTAR_WEBHOOK"
}
trap 'post_to_slack "#everest-build" ":heavy_exclamation_mark: \`$0 $@\` *failed* with error code: $?"' ERR

# Figure out the branch
if [[ $BUILD_SOURCEBRANCHNAME != "" ]]; then
  CI_BRANCH=${BUILD_SOURCEBRANCHNAME##refs/heads/}
  echo "... running in a VSTS environment, branch=$CI_BRANCH"
else
  echo "... trying to figure out the current branch"
  CI_BRANCH=$(git symbolic-ref HEAD) # fails if not on a branch
  CI_BRANCH=${CI_BRANCH##refs/heads/}
  tput setaf 1
  echo "... not running in a VSTS environment, $CI_BRANCH is the working directory's current branch"
  tput sgr0
fi

# Some environment variables we want
export OCAMLRUNPARAM=b
export OTHERFLAGS="--trace_error --print_z3_statistics"

function log_prelude() {
  # Some basic information
  echo "This is $0 $@"
  echo "Working directory: $(pwd)"
  echo "About to run: $build_command"
  echo "BUILD_SOURCEBRANCHNAME: $BUILD_SOURCEBRANCHNAME"
  echo "BUILD_DEFINITIONNAME: $BUILD_DEFINITIONNAME"
}

# Run a given command and commit & push the logs the the CI_LOGS repository.
# $1: the command to run
# $2: job description without space (e.g. everest-interop or fstar)
# $3: slack channel
# $4: github org/project
function run_log_commit() {
  if [[ $CI_LOGS == "" ]]; then
    echo "Don't know where to checkout the logs"
    echo "Please specify the location via the CI_LOGS environment variable"
    exit 1
  fi

  local build_command="$1"
  local stem=$2
  local slack_channel=$3
  local github_project=$4

  local slack_commit=$(git rev-parse HEAD | cut -c 1-8)
  local slack_branch=$CI_BRANCH
  local slack_log=$(git log --pretty=format:"%s" -1)
  local slack_author=$(git log --pretty=format:"%cn" -1)

  # Determine where the logs are going
  local unique_id
  if [[ $BUILD_BUILDNUMBER == "" ]]; then
    echo "... probably running locally, generating a random build number"
    unique_id=$RANDOM
  else
    unique_id=$BUILD_BUILDNUMBER
  fi
  local log_all=$stem-$slack_commit-$unique_id.all
  local log_err=$stem-$slack_commit-$unique_id.err

  # The actual CI
  SECONDS=0

  local success
  if ( log_prelude && $build_command ) \
    2> >( \
      while read -r line; do
        echo "$line" >> $CI_LOGS/$log_err;
        echo "$line" >> $CI_LOGS/$log_all
        echo STDERR: "$line" >&2
      done;
    ) \
    > >( \
      while read -r line; do
        echo "$line" >> $CI_LOGS/$log_all
        echo "$line"
      done
    )
  then
    success=true
  else
    echo "ERROR: PIPESTATUS=${PIPESTATUS[@]}"
    success=false
  fi

  # Commit & push the logs. This does not prevent interleaving from concurrent
  # build jobs.
  pushd $CI_LOGS
  export GIT_MERGE_AUTOEDIT=no
  git pull
  if [ -f $log_all ]; then
    git add $log_all
  fi
  if [ -f $log_err ]; then
    git add $log_err
  fi
  if $success; then
    git commit -am "[CI] $stem logs (success)"
  else
    git commit -am "[CI] $stem logs (failure)"
  fi
  git push
  popd

  # Get all the lines of the form: path\to\foo.fst(111,11-111,11) : (Error) something
  local failed_modules=$(egrep '\.fst.*: ?\(Error\)' $CI_LOGS/$log_all | \
    grep -v NegativeTests | \
    sed 's/^[^:]*[\\\/]\([^:]*\.fst\)[^:]*:.*/\1/' |
    sort | \
    uniq | \
    tr '\r\n' ' ')
  if [[ $failed_modules != "" ]]; then
    failed_modules="      *Verification failed ðŸ˜¡ for:* $failed_modules\n"
  fi

  if [[ $SLACK_FSTAR_WEBHOOK != "" ]]; then
    local raw_url=https://raw.githubusercontent.com/project-everest/ci-logs/master
    local slack_time=$(if (( $SECONDS >= 3600 )); then $DATE -d@$SECONDS -u +%Hh%Mm%Ss; else $DATE -d@$SECONDS -u +%Mm%Ss; fi)
    local slack_msg="<$raw_url/$log_err|stderr> <$raw_url/$log_all|stdout+stderr>"
    local slack_name=$(git remote get-url origin)
    slack_name=${slack_name##*/}
    slack_name=${slack_name%.git}
    local slack_os=$(uname)
    local slack_emoji=""
    local slack_type=""

    if $success; then
      slack_emoji=":white_check_mark:"
      slack_type="success ðŸ˜º"
    else
      slack_emoji=":no_entry:"
      slack_type="failure ðŸ˜¿"
    fi

    # The branch *may* be of the form user_foobar
    local maybe_slack_user="${slack_branch%%_*}"

    # Check if the branch has c_ to send to the appropriate channel - otherwise
    # check if the tentative user name is a match using slack-users file
    if [[ ${slack_branch##c_} != $slack_branch ]]; then
      slack_channel=${slack_branch##c_}
      slack_channel="#${slack_channel%%_*}"
    elif egrep ^$maybe_slack_user$ $EVEREST_CI_HOME/slack-users >/dev/null 2>&1; then
      slack_channel="@$maybe_slack_user"
    fi

    # Set up payload. If branch is not c_ or a valid slack name_ then just leave payload as default
    local payload="$slack_emoji \`$build_command\` on <https://github.com/$github_project/commit/$slack_commit|$slack_commit> ($slack_branch) is a *$slack_type*\n\
      *Project:* $slack_name\n\
      *Message:* $(quote "$slack_log")\n\
      *Author:* $slack_author\n\
      *Duration:* $slack_time\n\
      *OS:* $slack_os\n\
      *Logs:* $slack_msg\n$failed_modules\
      *VSTS Build definition:* $BUILD_DEFINITIONNAME"

    post_to_slack "$slack_channel" "$payload"
  fi

  if ! $success; then
    exit 255
  fi
}

# Note: this performs an _approximate_ refresh of the hints, in the sense that
# since the hint refreshing job takes about 80 minutes, it's very likely someone
# merged to $CI_BRANCH in the meanwhile, which would invalidate some hints. So, we
# reset to origin/$CI_BRANCH, take in our hints, and push. This is short enough that
# the chances of someone merging in-between fetch and push are low.
function refresh_hints() {
  local remote=$1
  local extra="$2"
  local msg="$3"
  local hints_dir="$4"

  # Add all the hints, even those not under version control
  find $hints_dir -iname '*.hints' -and -not -path '*/.*' -and -not -path '*/dependencies/*' | xargs git add
  $extra

  git commit --allow-empty -m "[CI] $msg"
  # Memorize that commit
  commit=$(git rev-parse HEAD)
  # Drop any other files that were modified as part of the build (e.g.
  # parse.fsi)
  git reset --hard HEAD
  # Move to whatever is the most recent master (that most likely changed in the
  # meantime)
  git fetch
  git checkout $CI_BRANCH
  git reset --hard origin/$CI_BRANCH
  # Silent, always-successful merge
  export GIT_MERGE_AUTOEDIT=no
  git merge $commit -Xtheirs
  # Push.
  git push $remote $CI_BRANCH
}

function refresh_fstar_hints() {
  if [ -f ".scripts/git_rm_stale_hints.sh" ]; then
    ./.scripts/git_rm_stale_hints.sh
  fi
  refresh_hints "git@github.com:FStarLang/FStar.git" "git ls-files src/ocaml-output/ | xargs git add" "regenerate hints + ocaml snapshot" "."
}

function refresh_mitls_hints() {
  refresh_hints "git@github.com:mitls/mitls-fstar.git" "true" "regenerate hints" "src"
}

function refresh_hacl_hints() {
  refresh_hints "git@github.com:mitls/hacl-star.git" "true" "regenerate hints" "."
}

function everest_rebuild() {
  git clean -ffdx
  ./everest --yes $PARALLEL_OPT check reset make
}

function everest_move() {
  # This function is called from a test... so it needs to fast-fail because "set
  # -e" does not apply within subshells.

  # VSTS does not clean things properly... no point in fighting that, let's just
  # do it ourselves
  git clean -ffdx
  # Sanity check that will fail if something is off the rails
  ./everest --yes $PARALLEL_OPT check reset || return 1
  # Update every project to its know good version and branch, then for each
  # project run git pull
  source hashes.sh
  source repositories.sh
  local fresh=false
  local versions=""
  local url=""
  for r in ${!hashes[@]}; do
    cd $r
    git pull
    if [[ $(git rev-parse HEAD) != ${hashes[$r]} ]]; then
      fresh=true
      url=${repositories[$r]#git@github.com:}
      url="https://www.github.com/${url%.git}/compare/${hashes[$r]}...$(git rev-parse HEAD)"
      versions="$versions\n    *$r* <$url|moves to $(git rev-parse HEAD | cut -c 1-8)> on branch ${branches[$r]}"
    else
      versions="$versions\n    *$r* stays at $(git rev-parse HEAD | cut -c 1-8) on branch ${branches[$r]}"
    fi
    cd ..
  done
  versions="$versions\n"
  local msg=""
  if ! $fresh; then
    # Bail out early if there's nothing to do
    post_to_slack "#everest-build" ":information_source: *Nightly Everest Upgrade ($CI_BRANCH):* nothing to upgrade"
  elif ! ./everest --yes $PARALLEL_OPT make test verify; then
    # Provide a meaningful summary of what we tried
    msg=":no_entry: *Nightly Everest Upgrade ($CI_BRANCH):* upgrading each project to its latest version breaks the build\n$versions"
    post_to_slack "#everest-build" "$msg"
    return 255
  else
    # Life is good, record new revisions and commit.
    msg=":white_check_mark: *Nightly Everest Upgrade ($CI_BRANCH):* upgrading each project to its latest version works!\n$versions"
    post_to_slack "#everest-build" "$msg"
    git checkout $CI_BRANCH && \
    git pull && \
    ./everest --yes snapshot && \
    git commit -am "[CI] automatic upgrade" && \
    git push git@github.com:project-everest/everest.git $CI_BRANCH || \
    post_to_slack "#everest-build" ":no_entry: *Nightly Everest Upgrade:* could not push fresh commit on branch $CI_BRANCH"

    cd FStar
    if ! git diff --exit-code; then
      echo "New assemblies from Vale, committing"
      git commit -am "[CI] New assemblies coming from Vale"
      local commit=$(git rev-parse HEAD)
      local branch=${branches[FStar]}
      git fetch
      git reset --hard origin/$branch
      git merge -Xours $commit
      git push
    fi
    cd ..
  fi
}

# Remove unused images left over after the build
# TODO: replace with 'docker image prune' once we upgrade to Docker 1.13
function docker_image_prune () {
  while docker images --quiet --filter dangling=true | xargs docker rmi
  do
    true
  done
}

# Build a Docker image where everything will be built and verified,
# then push it to the Docker Hub as projecteverest/everest
# Requires credentials to access the Docker Hub servers:
# - user name in the DOCKER_HUB_USERNAME environment variable
# - password in the DOCKER_HUB_PASSWORD environment variable
function docker_from_scratch() {
  # First check if the image really needs to be rebuilt
  # Use the commit hash as Docker image metadata
  # and check whether it has changed,
  # or if DOCKER_FORCE_BUILD is nonempty
  current_commit_hash=`git rev-parse HEAD`
  old_commit_hash=`docker inspect --format '{{index .Config.Labels "commit_hash"}}' projecteverest/everest`
  if
      [[ -z ${DOCKER_FORCE_BUILD+x} ]] &&
      [[ "x$current_commit_hash" = "x$old_commit_hash" ]]
  then
      echo Docker image does not need to be rebuilt
      return 0
  fi
  # Then, log into the Docker Hub server
  if [ -z ${DOCKER_HUB_USERNAME+x} ] || [ -z ${DOCKER_HUB_PASSWORD+x} ]
  then
      echo Please specify Docker Hub username and password
      echo using the DOCKER_HUB_USERNAME and DOCKER_HUB_PASSWORD environment variables
      exit 1
  fi
  docker login --username="$DOCKER_HUB_USERNAME" --password="$DOCKER_HUB_PASSWORD" &&
  # Build the Docker image
  docker build --pull --no-cache --rm --tag=projecteverest/everest --build-arg "PARALLEL_OPT=$PARALLEL_OPT" --label "commit_hash=$current_commit_hash" .docker/everest/ &&
  # Push the image onto the Docker Hub
  echo "PIPESTATUS=${PIPESTATUS[@]}" &&
  echo Pushing projecteverest/everest to Docker Hub &&
  {
      # Retrying $retry times
      local retry=5
      until [ $retry -eq 0 ] || docker push projecteverest/everest
      do
	  retry=$(($retry - 1))
	  echo "Push failed. Number of remaining attempts: $retry"
      done
      [ $retry -ne 0 ]
  } &&
  # Cleanup: log out from Docker Hub and remove intermediate images
  docker logout &&
  docker_image_prune
}

function fetch_fstar_for_mitls() {
  # Clone F* from the specified revision, set FSTAR_HOME
  if [ ! -d fstar ]; then
    git clone https://github.com/FStarLang/FStar/ fstar
  fi
  cd fstar
  git fetch origin
  git reset --hard $(cat ../.fstar_version)
  make -C src/ocaml-output clean
  make -C src/ocaml-output $PARALLEL_OPT || \
    (sh src/ocaml-output/_build/sanitize.sh && make -C src/ocaml-output $PARALLEL_OPT) || \
    exit 255
  cd ..
  if command -v cygpath >/dev/null 2>&1; then
    export FSTAR_HOME=$(cygpath -m $(pwd)/fstar)
  else
    export FSTAR_HOME=$(pwd)/fstar
  fi
}

function fetch_kremlin_for_mitls() {
  # Clone Kremlin master version, set KREMLIN_HOME, TODO: make it so that we can record the kremlin version somehow?
  if [ ! -d kremlin ]; then
    git clone https://github.com/FStarLang/kremlin kremlin
  fi
  cd kremlin
  make clean
  make $PARALLEL_OPT
  cd ..
  if command -v cygpath >/dev/null 2>&1; then
    export KREMLIN_HOME=$(cygpath -m $(pwd)/kremlin)
  else
    export KREMLIN_HOME=$(pwd)/kremlin
  fi
}

function fetch_hacl_for_mitls() {
  # Clone hacl-star master version, set HACL_HOME
  if [ ! -d hacl-star ]; then
    git clone https://github.com/mitls/hacl-star hacl-star
  fi
  cd hacl-star
  git fetch origin
  git reset --hard origin/master
  make -C secure_api clean
  make -C secure_api/LowCProvider $PARALLEL_OPT
  cd ..
  if command -v cygpath >/dev/null 2>&1; then
    export HACL_HOME=$(cygpath -m $(pwd)/hacl-star)
  else
    export HACL_HOME=$(pwd)/hacl-star
  fi
}


function mitls_verify() {
  fetch_fstar_for_mitls && fetch_kremlin_for_mitls && fetch_hacl_for_mitls && make -C src/tls $PARALLEL_OPT all -k
}

function mitls_verify_and_hints() {
  mitls_verify && refresh_mitls_hints
}

function hacl_test() {
  if which cygpath 2>&1 >/dev/null; then
    export FSTAR_HOME=$(cygpath -m $(pwd)/dependencies/FStar)
    export OPENSSL_HOME=$(cygpath -m $FSTAR_HOME/ucontrib/CoreCrypto/ml/openssl)
    export KREMLIN_HOME=$(cygpath -m $(pwd)/dependencies/kremlin)
    export HACL_HOME=$(cygpath -m $(pwd))
  else
    export FSTAR_HOME=$(pwd)/dependencies/FStar
    export OPENSSL_HOME=$FSTAR_HOME/ucontrib/CoreCrypto/ml/openssl
    export KREMLIN_HOME=$(pwd)/dependencies/kremlin
    export HACL_HOME=$(pwd)
  fi
  # VSTS doesn't update submodules recursively, so we do this explicitly
  (cd $FSTAR_HOME && git submodule update --init -f) && \
    make -C dependencies/FStar/src/ocaml-output $PARALLEL_OPT && \
    SYSTEM= BUILD= RELEASE= VERSION= make -C dependencies/FStar/ucontrib/CoreCrypto/ml $PARALLEL_OPT && \
    make -C dependencies/kremlin $PARALLEL_OPT && \
    make $PARALLEL_OPT -C test
}

function hacl_test_and_hints() {
  hacl_test && refresh_hacl_hints
}

# Parse options. All options should come first, before the operation.
# Currently, only "-j n" is supported.
while true
do
  case "$1" in
    -j)
      # The -j option is in two parts: -j n, where n is the parallel factor
      # (max number of parallel jobs)
      shift
      PARALLEL_OPT="-j $1"
      ;;
    *)
      break
      ;;
  esac
  shift
done

# Main commands.
case "$1" in
  fstar-ci)
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi
    run_log_commit "make -C src utest $PARALLEL_OPT -k" "fstar-ci" "#fstar-build" "FStarLang/FStar"
    ;;

  fstar-nightly)
    # Same as above, except with a different label and hint regeneration.
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi
    export OTHERFLAGS="--record_hints --hint_info $OTHERFLAGS"
    run_log_commit "make -C src utest $PARALLEL_OPT -k" "fstar-nightly" "#fstar-build" "FStarLang/FStar"
    refresh_fstar_hints
    ;;

  fstar-docs-nightly)
    # Create the docs associated with FStar
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    # First - get fstar built
    make -C src/ocaml-output clean
    make -C src/ocaml-output $PARALLEL_OPT

    # Second - run fstar with the --doc flag
    run_log_commit ".ci/fsdoc.sh" "fstar-docs-nightly" "#fstar-build" "FStarLang/FStar"
    ;;

  fstar-binary-build)
    # Builds the binaries for fstar project
    if [ ! -d ulib ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi
    run_log_commit "./.scripts/process_build.sh" "fstar-binarybuild" "#fstar-build" "FStarLang/FStar"
    ;;

  mitls-ci)
    if [ ! -f miTLS_icla.txt ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    run_log_commit "mitls_verify" "mitls-ci" "#mitls-build" "mitls/mitls-fstar"
    ;;

  mitls-nightly)
    if [ ! -f miTLS_icla.txt ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    export OTHERFLAGS="--record_hints --hint_info $OTHERFLAGS"
    run_log_commit "mitls_verify_and_hints" "mitls-ci" "#mitls-build" "mitls/mitls-fstar"
    ;;


  hacl-ci)
    if [ ! -d "secure_api" ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    run_log_commit "hacl_test" "hacl-ci" "#hacl-build" "mitls/hacl-star"
    ;;

  hacl-nightly)
    if [ ! -d "secure_api" ]; then
      echo "I don't seem to be in the right directory, bailing"
      exit 1
    fi

    run_log_commit "hacl_test_and_hints" "hacl-ci" "#hacl-build" "mitls/hacl-star"
    ;;

  everest-ci)
    # Clone all projects together and make sure they test and build together
    if ! [ -x everest ]; then
      echo "Not in the right directory"
      exit 1
    fi
    run_log_commit "everest_rebuild" "everest-build" "#everest-build" "project-everest/everest"
    # This second command is only run if the first one succeeds (the script
    # aborts otherwise).
    run_log_commit "./everest --yes $PARALLEL_OPT test" "everest-test" "#everest-build" "project-everest/everest"
    ;;

  everest-nightly-check)
    # Start a fresh docker container that sets up everything, checks that
    # everything builds and runs on a fresh Ubuntu setup
    if ! [ -x everest ]; then
      echo "Not in the right directory"
      exit 1
    fi
    run_log_commit "docker_from_scratch" "everest-ubuntu" "#everest-build" "project-everest/everest-ci"
    ;;

  everest-nightly-move)
    # Try to move the package to their last revision
    if ! [ -x everest ]; then
      echo "Not in the right directory"
      exit 1
    fi
    run_log_commit "everest_move" "everest-upgrade" "#everest-build" "project-everest/everest"
    ;;

  vale-ci)
    # Run vale ci - start in everest
    if ! [ -d tools/Vale ]; then
      echo "Not in the right directory"
      exit 1
    fi

    # Use known good build of Kremlin (instead of checked in binary)
    rm hashes.sh || true
    wget https://raw.githubusercontent.com/project-everest/everest/master/hashes.sh
    source hashes.sh
    if ! [ -d kremlin ]; then
      git clone https://github.com/FStarLang/kremlin
    fi
    (cd kremlin && git fetch && git reset --hard ${hashes[kremlin]})
    if which cygpath 2>&1 >/dev/null; then
      export KREMLIN_HOME=$(cygpath -m $(pwd)/kremlin)
      export PATH=$(cygpath -m $(pwd))/kremlin:$PATH
    else
      export KREMLIN_HOME=$(pwd)/kremlin
      export PATH=$(pwd)/kremlin:$PATH
    fi
    make -C kremlin $PARALLEL_OPT

    # Set up build environment
    nuget restore tools/Vale/src/packages.config -PackagesDirectory tools/FsLexYacc

    #since each build verifies x86, x64 and ARM, only verify on one build as takes quite a bit longer to verify
    if [[ "$OS" == "Windows_NT" ]]; then
      if [[ "$Platform" == "X64" ]]; then
        run_log_commit "scons.bat $PARALLEL_OPT --NOVERIFY" "vale-build" "#vale-build" "project-everest/vale"
      else
        run_log_commit "scons.bat $PARALLEL_OPT" "vale-build" "#vale-build" "project-everest/vale"
      fi
    else
      run_log_commit "scons $PARALLEL_OPT --NOVERIFY" "vale-build" "#vale-build" "project-everest/vale"
    fi
    ;;

  *)
    cat <<USAGE
USAGE: $0 [OPTIONS] ACTION

OPTIONS:
  -j n    Set the max number of parallel jobs to n (default 1)

ACTIONS:
  fstar-ci
  fstar-nightly
  fstar-docs-nightly
  fstar-binary-build
  mitls-ci
  everest-ci
  everest-nightly-check
  everest-nightly-move
  vale-ci

REMARKS:
  Read this script's source code for more explanations. It has comments.
USAGE
    ;;
esac
